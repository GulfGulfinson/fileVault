name: GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  # This is needed for enablement
  actions: write
  deployments: write
  statuses: write
  repository-projects: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
          # Optional: use a PAT if GITHUB_TOKEN doesn't have required permissions
          # token: ${{ secrets.GH_PAGES_TOKEN }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate JavaDoc
        run: |
          mkdir -p docs/javadoc
          mvn javadoc:javadoc -Dshowwarnings=false
          
          # Check for different potential output paths
          if [ -d "target/site/apidocs" ]; then
            cp -r target/site/apidocs/* docs/javadoc/ || echo "No files to copy from target/site/apidocs"
          elif [ -d "target/apidocs" ]; then
            cp -r target/apidocs/* docs/javadoc/ || echo "No files to copy from target/apidocs"
          elif [ -d "target/javadoc" ]; then
            cp -r target/javadoc/* docs/javadoc/ || echo "No files to copy from target/javadoc"
          else
            echo "JavaDoc files not found in expected locations, creating placeholder"
            echo "<html><body><h1>JavaDoc will be available soon</h1></body></html>" > docs/javadoc/index.html
          fi
          
          # Verify javadoc directory has content
          ls -la docs/javadoc || echo "Javadoc directory is empty or doesn't exist"
          
      - name: Install Dependencies
        run: |
          npm install -g @docusaurus/core @docusaurus/preset-classic
          
      - name: Build Site
        run: |
          # Copy our static HTML files
          mkdir -p build-output
          cp -r docs/* build-output/
          
          # Process markdown files with Docusaurus
          mkdir -p docs-site
          cp README.md docs-site/index.md
          # Extract documentation from src if available
          find src -name "*.md" -exec cp {} docs-site/ \; || echo "No markdown files found in src"
          
          # Create docusaurus project
          npx create-docusaurus@latest website classic --typescript
          
          # Copy documentation
          cp -r docs-site/* website/docs/ || echo "No files to copy from docs-site"
          
          # Build the Docusaurus site
          cd website
          npm install
          npm run build
          
          # Copy the Docusaurus output to our build directory
          mkdir -p ../build-output/docs
          cp -r build/* ../build-output/docs/ || echo "No files to copy from website/build"
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build-output

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 