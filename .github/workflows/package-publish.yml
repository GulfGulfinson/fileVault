name: Build and Publish Package

on:
  release:
    types: [created]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.get_tag_version.outputs.TAG_VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
      
      - name: Install xvfb
        run: sudo apt-get install -y xvfb
      
      - name: Build with Maven
        run: xvfb-run --auto-servernum mvn -B package --file pom.xml
      
      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
      
      - name: Extract release tag version
        id: get_tag_version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"
            echo "TAG_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "TAG_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Update version if needed
        run: |
          POM_VERSION="${{ steps.get_version.outputs.VERSION }}"
          TAG_VERSION="${{ steps.get_tag_version.outputs.TAG_VERSION }}"
          
          if [ "$POM_VERSION" != "$TAG_VERSION" ]; then
            echo "Updating version in pom.xml from $POM_VERSION to $TAG_VERSION"
            mvn versions:set -DnewVersion=$TAG_VERSION -DgenerateBackupPoms=false
          else
            echo "Version in pom.xml ($POM_VERSION) already matches tag version"
          fi
      
      - name: Copy settings.xml
        run: mkdir -p ~/.m2 && cp .github/workflows/settings.xml ~/.m2/settings.xml
      
      - name: Publish package to GitHub Packages
        run: mvn -B deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: FileVault-shaded-${{ steps.get_tag_version.outputs.TAG_VERSION }}
          path: target/FileVault-shaded.jar
      
      - name: Add package to release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/FileVault-shaded.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    needs: build-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Debug Job Start
        run: |
          echo "Docker build job started"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "GitHub Ref: ${{ github.ref }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven (to ensure JAR exists)
        run: mvn -B package --file pom.xml
      
      - name: Verify JAR exists
        run: |
          echo "Contents of target directory:"
          ls -la target/
          if [ ! -f "target/FileVault-shaded.jar" ]; then
            echo "ERROR: target/FileVault-shaded.jar not found!"
            exit 1
          else
            echo "✅ target/FileVault-shaded.jar exists"
            file_size=$(stat -c %s "target/FileVault-shaded.jar")
            echo "File size: $file_size bytes"
          fi
      
      - name: Create Docker build directory
        run: |
          # Erstelle ein temporäres Verzeichnis für den Docker-Build
          mkdir -p docker-build
          
          # Kopiere die JAR-Datei in das Build-Verzeichnis
          cp target/FileVault-shaded.jar docker-build/FileVault.jar
          
          # Erstelle eine verbesserte Dockerfile im Build-Verzeichnis
          cat > docker-build/Dockerfile << EOF
          # Basis-Image mit OpenJDK 17 und JavaFX
          FROM openjdk:17-jdk-slim

          # Metadaten
          LABEL org.opencontainers.image.source="https://github.com/GulfGulfinson/fileVault"
          LABEL org.opencontainers.image.description="FileVault - Sichere Dateiverwaltung"
          LABEL org.opencontainers.image.licenses=MIT

          # Arbeitsverzeichnis setzen
          WORKDIR /app

          # Abhängigkeiten für JavaFX auf Debian
          RUN apt-get update && \\
              apt-get install -y --no-install-recommends \\
              libgtk-3-0 \\
              libglib2.0-0 \\
              libgl1 \\
              libasound2 \\
              libxtst6 \\
              libx11-6 \\
              libxxf86vm1 \\
              locales \\
              xorg \\
              xvfb \\
              && rm -rf /var/lib/apt/lists/*

          # JavaFX SDK herunterladen und installieren (Linux version)
          RUN apt-get update && apt-get install -y --no-install-recommends wget unzip && \\
              mkdir -p /opt/javafx && \\
              wget -q https://download2.gluonhq.com/openjfx/17.0.14/openjfx-17.0.14_linux-x64_bin-sdk.zip && \\
              unzip openjfx-17.0.14_linux-x64_bin-sdk.zip -d /opt && \\
              rm openjfx-17.0.14_linux-x64_bin-sdk.zip && \\
              apt-get purge -y wget unzip && \\
              apt-get autoremove -y && \\
              rm -rf /var/lib/apt/lists/*

          # JavaFX-Modulpfad setzen
          ENV PATH_TO_FX=/opt/javafx-sdk-17.0.14/lib

          # Kopiere die JAR-Datei (bereits im Build-Kontext)
          COPY FileVault.jar /app/FileVault.jar

          # Port für die API freigeben
          EXPOSE 9090

          # Start-Befehl für die API mit JavaFX-Konfiguration
          CMD ["sh", "-c", "Xvfb :99 -screen 0 1024x768x24 -nolisten tcp & DISPLAY=:99 java -Djava.awt.headless=true --module-path \${PATH_TO_FX} --add-modules javafx.controls,javafx.fxml -jar /app/FileVault.jar --api-port=9090"]
          EOF
          
          echo "Contents of docker-build directory:"
          ls -la docker-build/
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          # Zum Build-Verzeichnis wechseln
          cd docker-build
          
          # Versionsnummer extrahieren
          if [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="latest"
          fi
          
          # Repository-Owner in Kleinbuchstaben konvertieren
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "Using version: $VERSION"
          echo "Using repository owner: $REPO_OWNER"
          
          # Docker-Image bauen (mit Repository-Name in Kleinbuchstaben)
          docker build -t ghcr.io/${REPO_OWNER}/filevault:${VERSION} -t ghcr.io/${REPO_OWNER}/filevault:latest .
          
          # Docker-Image pushen
          docker push ghcr.io/${REPO_OWNER}/filevault:${VERSION}
          docker push ghcr.io/${REPO_OWNER}/filevault:latest 