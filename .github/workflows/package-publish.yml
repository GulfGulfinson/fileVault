name: Build and Publish Package

on:
  release:
    types: [created]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.get_tag_version.outputs.TAG_VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
      
      - name: Install xvfb
        run: sudo apt-get install -y xvfb
      
      - name: Build with Maven
        run: xvfb-run --auto-servernum mvn -B package --file pom.xml
      
      - name: Extract version from pom.xml
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
      
      - name: Extract release tag version
        id: get_tag_version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"
            echo "TAG_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "TAG_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Update version if needed
        run: |
          POM_VERSION="${{ steps.get_version.outputs.VERSION }}"
          TAG_VERSION="${{ steps.get_tag_version.outputs.TAG_VERSION }}"
          
          if [ "$POM_VERSION" != "$TAG_VERSION" ]; then
            echo "Updating version in pom.xml from $POM_VERSION to $TAG_VERSION"
            mvn versions:set -DnewVersion=$TAG_VERSION -DgenerateBackupPoms=false
          else
            echo "Version in pom.xml ($POM_VERSION) already matches tag version"
          fi
      
      - name: Copy settings.xml
        run: mkdir -p ~/.m2 && cp .github/workflows/settings.xml ~/.m2/settings.xml
      
      - name: Publish package to GitHub Packages
        run: mvn -B deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: FileVault-shaded-${{ steps.get_tag_version.outputs.TAG_VERSION }}
          path: target/FileVault-shaded.jar
      
      - name: Add package to release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/FileVault-shaded.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    needs: build-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: FileVault-shaded-${{ needs.build-and-publish.outputs.version }}
          path: ./target/
      
      - name: List files to verify JAR download
        run: ls -la target/
      
      - name: Extract version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Docker image
        run: |
          echo "Building Docker image ghcr.io/${{ github.repository_owner }}/filevault:${{ steps.get_version.outputs.VERSION }}"
          docker build -t ghcr.io/${{ github.repository_owner }}/filevault:${{ steps.get_version.outputs.VERSION }} -t ghcr.io/${{ github.repository_owner }}/filevault:latest .
          
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/filevault:${{ steps.get_version.outputs.VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/filevault:latest 