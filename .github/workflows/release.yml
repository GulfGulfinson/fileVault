name: Create Release

on:
  push:
    tags:
      - 'v*'  # Wird ausgeführt, wenn ein Tag gepusht wird, das mit 'v' beginnt

# Add permissions for the GitHub token
permissions:
  contents: write
  discussions: write

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Install xvfb
        run: sudo apt-get install -y xvfb
      
      - name: Build and Test with Maven
        run: xvfb-run --auto-servernum mvn -B package --file pom.xml

      - name: Check if release exists and determine next version
        id: check_version
        run: |
          # Extrahiere die gepushte Tag-Version
          PUSHED_TAG=${GITHUB_REF#refs/tags/v}
          echo "PUSHED_TAG=${PUSHED_TAG}" >> $GITHUB_OUTPUT
          
          # Prüfe ob ein Release mit diesem Tag bereits existiert mit curl
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${PUSHED_TAG}")
          
          if [ "$HTTP_STATUS" == "200" ]; then
            echo "Release für v${PUSHED_TAG} existiert bereits, ermittle nächste verfügbare Version..."
            
            # Hole die Liste aller Releases
            RELEASES=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases" | \
              grep -o '"tag_name": "v[^"]*"' | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | sort -V | tail -n1)
            
            if [ -z "$RELEASES" ]; then
              # Fallback: Verwende git tags lokal
              LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | sort -V | tail -n1)
            else
              LATEST_TAG="$RELEASES"
            fi
            
            LATEST_VERSION=${LATEST_TAG#v}
            
            # Version in Major.Minor.Patch aufteilen
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
            
            # Patch-Version inkrementieren
            NEW_PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            
            echo "Nächste zu verwendende Version: v${NEXT_VERSION}"
            echo "VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Verwende gepushte Version: v${PUSHED_TAG}"
            echo "VERSION=${PUSHED_TAG}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare release files
        run: |
          mkdir -p release
          cp target/FileVault-shaded.jar release/
          cp README.md release/
          
          # Create LICENSE file if it doesn't exist
          if [ ! -f LICENSE ]; then
            echo "Creating a simple LICENSE file"
            cat > release/LICENSE << 'EOL'
          MIT License

          Copyright (c) 2024 FileVault Phillip Schneider

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE. ~Phillip Schneider
          EOL
          else
            cp LICENSE release/
          fi
          
          cp start.bat release/
          cp start.sh release/
          cp start-api.bat release/
          cp start-api.sh release/
          chmod +x release/*.sh
          
          # Create lib directory for JavaFX - we'll include a placeholder
          mkdir -p release/lib
          echo "This directory should contain JavaFX library files for standalone execution." > release/lib/README.txt
          
          # Erstellen einer Anleitung zur Ausführung
          cat > release/AUSFÜHRUNG.md << 'EOL'
          # Anleitung zur Ausführung von FileVault

          ## Voraussetzungen
          - Java 17 oder höher
          - Maven (falls Sie nicht das JAR direkt verwenden)

          ## Ausführung mit den Skripten
          ### Windows
          1. Doppelklick auf `start.bat` - startet die Anwendung mit dem Standard-API-Port 9090
          2. Oder von der Kommandozeile: `start.bat [PORT]` - spezifiziert einen anderen Port

          ### Linux/Mac
          1. Stellen Sie sicher, dass die Skripte ausführbar sind: `chmod +x *.sh`
          2. Ausführen mit: `./start.sh` - startet die Anwendung mit dem Standard-API-Port 9090
          3. Oder mit anderem Port: `./start.sh [PORT]`

          ## Ausführung nur der API
          ### Windows
          - `start-api.bat [PORT]`

          ### Linux/Mac
          - `./start-api.sh [PORT]`

          ## Direkte Ausführung der JAR (Alternative)
          ```
          java -jar FileVault-shaded.jar --api-port=9090
          ```

          ## WICHTIG: JavaFX-Abhängigkeiten
          Der lib-Ordner mit den JavaFX-Bibliotheken ist erforderlich, damit die Anwendung korrekt läuft.
          Die Start-Skripte sind so konfiguriert, dass sie den lib-Ordner im aktuellen Verzeichnis verwenden.

          ## Erste Schritte
          1. Bei der ersten Ausführung wird ein neuer Benutzer angelegt
          2. Für einen neuen Benutzer muss die Datenbank gelöscht werden (im ~/.filevault/ Verzeichnis)
          EOL
          
          # Verwende die Version aus dem check_version Step
          VERSION="${{ steps.check_version.outputs.VERSION }}"
          
          # Erstellen eines ZIP-Archivs
          cd release
          zip -r ../FileVault-${VERSION}.zip .
          cd ..
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check_version.outputs.VERSION }}
          name: Release ${{ steps.check_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            FileVault-${{ steps.check_version.outputs.VERSION }}.zip
            target/FileVault-shaded.jar
            release/AUSFÜHRUNG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 