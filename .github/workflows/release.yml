name: Create Release

on:
  push:
    tags:
      - 'v*'  # Wird ausgeführt, wenn ein Tag gepusht wird, das mit 'v' beginnt
  workflow_dispatch:
    inputs:
      version:
        description: 'Version für den Release (z.B. 1.0.2)'
        required: true
        default: '1.0.2'
      build_docker:
        description: 'Docker-Container erstellen und veröffentlichen'
        required: false
        type: boolean
        default: true

# Add permissions for the GitHub token
permissions:
  contents: write
  discussions: write

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check_version.outputs.VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Install xvfb
        run: sudo apt-get install -y xvfb
      
      - name: Build and Test with Maven
        run: xvfb-run --auto-servernum mvn -B package --file pom.xml

      - name: Check if release exists and determine next version
        id: check_version
        run: |
          # Unterscheidung zwischen Tag-Push und manuellem Trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manueller Trigger - verwende den Eingabewert
            MANUAL_VERSION="${{ github.event.inputs.version }}"
            echo "Manuell angegebene Version: v${MANUAL_VERSION}"
            echo "PUSHED_TAG=${MANUAL_VERSION}" >> $GITHUB_OUTPUT
          else
            # Tag-Push - extrahiere die gepushte Tag-Version
            PUSHED_TAG=${GITHUB_REF#refs/tags/v}
            echo "Gepushte Tag-Version: v${PUSHED_TAG}"
            echo "PUSHED_TAG=${PUSHED_TAG}" >> $GITHUB_OUTPUT
          fi
          
          # Definieren der Version für den Check (entweder aus Tag oder manuell angegeben)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CHECK_VERSION="${{ github.event.inputs.version }}"
          else
            CHECK_VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          # Prüfe ob ein Release mit diesem Tag bereits existiert mit curl
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${CHECK_VERSION}")
          
          if [ "$HTTP_STATUS" == "200" ]; then
            echo "Release für v${CHECK_VERSION} existiert bereits, ermittle nächste verfügbare Version..."
            
            # Hole die Liste aller Releases
            RELEASES=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases" | \
              grep -o '"tag_name": "v[^"]*"' | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | sort -V | tail -n1)
            
            if [ -z "$RELEASES" ]; then
              # Fallback: Verwende git tags lokal
              LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | sort -V | tail -n1)
            else
              LATEST_TAG="$RELEASES"
            fi
            
            LATEST_VERSION=${LATEST_TAG#v}
            
            # Version in Major.Minor.Patch aufteilen
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
            
            # Patch-Version inkrementieren
            NEW_PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            
            echo "Nächste zu verwendende Version: v${NEXT_VERSION}"
            echo "VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Verwende Version: v${CHECK_VERSION}"
            echo "VERSION=${CHECK_VERSION}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare release files
        run: |
          mkdir -p release
          cp target/FileVault-shaded.jar release/
          cp README.md release/
          
          # Create LICENSE file if it doesn't exist
          if [ ! -f LICENSE ]; then
            echo "Creating a simple LICENSE file"
            cat > release/LICENSE << 'EOL'
          MIT License

          Copyright (c) 2024 FileVault Phillip Schneider

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE. ~Phillip Schneider
          EOL
          else
            cp LICENSE release/
          fi
          
          cp start.bat release/
          cp start.sh release/
          cp start-api.bat release/
          cp start-api.sh release/
          chmod +x release/*.sh
          
          # Create lib directory for JavaFX - we'll include a placeholder
          mkdir -p release/lib
          echo "This directory should contain JavaFX library files for standalone execution." > release/lib/README.txt
          
          # Erstellen einer Anleitung zur Ausführung
          cat > release/AUSFÜHRUNG.md << 'EOL'
          # Anleitung zur Ausführung von FileVault

          ## Voraussetzungen
          - Java 17 oder höher
          - Maven (falls Sie nicht das JAR direkt verwenden)

          ## Ausführung mit den Skripten
          ### Windows
          1. Doppelklick auf `start.bat` - startet die Anwendung mit dem Standard-API-Port 9090
          2. Oder von der Kommandozeile: `start.bat [PORT]` - spezifiziert einen anderen Port

          ### Linux/Mac
          1. Stellen Sie sicher, dass die Skripte ausführbar sind: `chmod +x *.sh`
          2. Ausführen mit: `./start.sh` - startet die Anwendung mit dem Standard-API-Port 9090
          3. Oder mit anderem Port: `./start.sh [PORT]`

          ## Ausführung nur der API
          ### Windows
          - `start-api.bat [PORT]`

          ### Linux/Mac
          - `./start-api.sh [PORT]`

          ## Direkte Ausführung der JAR (Alternative)
          ```
          java -jar FileVault-shaded.jar --api-port=9090
          ```

          ## WICHTIG: JavaFX-Abhängigkeiten
          Der lib-Ordner mit den JavaFX-Bibliotheken ist erforderlich, damit die Anwendung korrekt läuft.
          Die Start-Skripte sind so konfiguriert, dass sie den lib-Ordner im aktuellen Verzeichnis verwenden.

          ## Erste Schritte
          1. Bei der ersten Ausführung wird ein neuer Benutzer angelegt
          2. Für einen neuen Benutzer muss die Datenbank gelöscht werden (im ~/.filevault/ Verzeichnis)
          EOL
          
          # Verwende die Version aus dem check_version Step
          VERSION="${{ steps.check_version.outputs.VERSION }}"
          
          # Erstellen eines ZIP-Archivs
          cd release
          zip -r ../FileVault-${VERSION}.zip .
          cd ..
      
      - name: Create Git tag if workflow was manually triggered
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          VERSION="${{ steps.check_version.outputs.VERSION }}"
          echo "Erstelle neues Git-Tag v${VERSION}..."
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Überprüfen, ob das Tag bereits existiert
          if git show-ref --tags | grep -q "refs/tags/v${VERSION}"; then
            echo "Tag v${VERSION} existiert bereits, kein neues Tag erforderlich"
          else
            echo "Erstelle neues Tag v${VERSION}"
            git tag -a "v${VERSION}" -m "Release v${VERSION}"
            git push origin "v${VERSION}"
          fi
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check_version.outputs.VERSION }}
          name: Release ${{ steps.check_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            FileVault-${{ steps.check_version.outputs.VERSION }}.zip
            target/FileVault-shaded.jar
            release/AUSFÜHRUNG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    needs: build
    if: ${{ github.event.inputs.build_docker == 'true' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Create simplified Dockerfile
        run: |
          cat > Dockerfile.simple << EOF
          FROM eclipse-temurin:17-jre-alpine
          
          WORKDIR /app
          
          # JavaFX-Abhängigkeiten für Alpine Linux
          RUN apk add --no-cache libxtst libxi libxrandr libxrender libxext libxfixes libx11 fontconfig ttf-dejavu
          
          # Kopiere die JAR-Datei
          COPY ./target/FileVault-shaded.jar /app/FileVault.jar
          
          # Port für die API freigeben
          EXPOSE 9090
          
          # Start-Befehl für die API
          ENTRYPOINT ["java", "-Djava.awt.headless=true", "-jar", "/app/FileVault.jar", "--api-port=9090"]
          EOF
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/filevault:${{ needs.build.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/filevault:latest 